<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>multiverse</title>
<link>https://amenalahassa.github.io/amenalahassa/</link>
<atom:link href="https://amenalahassa.github.io/amenalahassa/index.xml" rel="self" type="application/rss+xml"/>
<description>A small space in the vast universe of the Internet where I share the ideas and knowledge I&#39;ve gained on my journey into AI and software development.</description>
<generator>quarto-1.5.37</generator>
<lastBuildDate>Thu, 30 May 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Passer de Yolo à CocoDetection, c’est possible !</title>
  <link>https://amenalahassa.github.io/amenalahassa/posts/dataset-converter.html</link>
  <description><![CDATA[ 




<section id="de-quoi-sagit-il" class="level1">
<h1>De quoi s’agit-il ?</h1>
<p>Dans ce post, je montre comment convertir un dataset YOLO en format COCO en utilisant la bibliothèque Python <code>globox</code>, une solution pratique que j’ai récemment appliquée pour un projet de segmentation d’instance. <code>globox</code> permet également de faire l’inverse, ainsi que de nombreuses autres conversions de formats de datasets. Je vous invite à explorer ce package pour découvrir toutes les possibilités qu’il offre.</p>
</section>
<section id="ok-ça-donne-quoi" class="level1">
<h1>Ok, ça donne quoi ?</h1>
<div id="cell-4" class="cell" data-trusted="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install globox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pycocotools</span></code></pre></div>
</details>
</div>
<div id="cell-5" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-31T02:24:21.015275Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-31T02:24:21.015826Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-31T02:24:21.024047Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-31T02:24:21.015782Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-31T02:24:21.022705Z&quot;}" data-trusted="true" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pathfrom PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Imagefrom torchvision.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CocoDetectionfrom globox <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AnnotationSetimport matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pltimport matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> patchesimport numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</details>
</div>
<p>Le code ci-dessous initialise trois chemins en utilisant la bibliothèque <code>Path</code> de Python. Les chemins <code>label_path</code> et <code>image_path</code> pointent respectivement vers les dossiers contenant les étiquettes et les images du dataset YOLO. Ensuite, le chemin <code>save_file</code> est défini pour sauvegarder le fichier de sortie au format COCO. Enfin, la commande <code>annotations = AnnotationSet.from_yolo_v7(label_path, image_folder=image_path)</code> crée un ensemble d’annotations à partir des étiquettes YOLO et des images associées, prêt à être converti au format COCO.</p>
<div id="cell-7" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-31T01:59:02.484254Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-31T01:59:02.484793Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-31T01:59:36.773381Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-31T01:59:02.484759Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-31T01:59:36.772245Z&quot;}" data-trusted="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">label_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/kaggle/input/medleaves-medicinal-plant-leaves-dataset/MedLeaves/MedLeaves/train/labels"</span>)</span>
<span id="cb3-2">image_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/kaggle/input/medleaves-medicinal-plant-leaves-dataset/MedLeaves/MedLeaves/train/images"</span>) </span>
<span id="cb3-3"></span>
<span id="cb3-4">save_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/kaggle/working/medleaves-coco.json"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">annotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AnnotationSet.from_yolo_v7(label_path, image_folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_path)</span></code></pre></div>
</div>
<p>La commande <code>annotations.show_stats()</code> est utilisée pour afficher des statistiques sur l’ensemble d’annotations créé précédemment. Cette méthode fournit un résumé utile des données annotées, comme le nombre total d’images, d’annotations, et la distribution des catégories d’objets. Cela permet de vérifier rapidement l’état et la qualité des annotations avant de procéder à des opérations de conversion ou d’entraînement de modèles.</p>
<div id="cell-9" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-31T01:59:41.476666Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-31T01:59:41.477084Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-31T01:59:41.546606Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-31T01:59:41.477049Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-31T01:59:41.545284Z&quot;}" data-trusted="true" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">annotations.show_stats()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-style: italic">      Database Stats      </span>
┏━━━━━━━┳━━━━━━━━┳━━━━━━━┓
┃<span style="font-weight: bold"> Label </span>┃<span style="font-weight: bold"> Images </span>┃<span style="font-weight: bold"> Boxes </span>┃
┡━━━━━━━╇━━━━━━━━╇━━━━━━━┩
│ 0     │    415 │  2322 │
│ 1     │    408 │   498 │
│ 10    │    416 │   588 │
│ 11    │    412 │   612 │
│ 12    │    414 │  2401 │
│ 13    │    410 │   810 │
│ 14    │    412 │  2750 │
│ 15    │    408 │  1605 │
│ 16    │    411 │  2237 │
│ 17    │    411 │  2662 │
│ 18    │    409 │   682 │
│ 19    │    413 │  5032 │
│ 2     │    414 │  5830 │
│ 20    │    405 │   882 │
│ 21    │    415 │  2892 │
│ 22    │    409 │   540 │
│ 23    │    414 │  1275 │
│ 24    │    411 │   727 │
│ 25    │    407 │  4778 │
│ 26    │    413 │  1255 │
│ 27    │    406 │   997 │
│ 28    │    411 │   618 │
│ 29    │    409 │  1143 │
│ 3     │    411 │  1584 │
│ 4     │    405 │  3082 │
│ 5     │    405 │  1275 │
│ 6     │    416 │   769 │
│ 7     │    403 │   570 │
│ 8     │    409 │  1563 │
│ 9     │    410 │  2475 │
├───────┼────────┼───────┤
│<span style="font-weight: bold"> Total </span>│<span style="font-weight: bold">  12312 </span>│<span style="font-weight: bold"> 54454 </span>│
└───────┴────────┴───────┘
</pre>
</div>
</div>
<p>C’est ici que la magie à lieu ! La commande <code>annotations.save_coco(save_file, auto_ids=True)</code> sauvegarde l’ensemble d’annotations dans un fichier au format COCO, en utilisant le chemin spécifié par <code>save_file</code>. L’option <code>auto_ids=True</code> indique que les identifiants pour les annotations et les images seront générés automatiquement si nécessaire.</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">annotations.save_coco(save_file, auto_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p>Visualisons ensuite le résultat, mais en chargeant les données au format CocoDetection. Le code ci-dessous fait cela en utilisant la classe <code>CocoDetection</code> de la bibliothèque PyTorch.</p>
<p>Le paramètre <code>root</code> est défini avec le chemin vers le dossier des images (<code>image_path</code>), tandis que <code>annFile</code> spécifie le chemin du fichier d’annotations au format COCO (<code>save_file</code>).</p>
<p>Enfin, <code>train_data[0][0]</code> accède à la première image du dataset, afin ainsi de le visualiser.</p>
<div id="cell-13" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-31T02:00:43.044327Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-31T02:00:43.044769Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-31T02:00:43.221923Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-31T02:00:43.044735Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-31T02:00:43.220768Z&quot;}" data-trusted="true" data-execution_count="12">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CocoDetection(root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_path, annFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> save_file, transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb6-2">train_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>
<figure class="figure">
<p><img src="https://amenalahassa.github.io/amenalahassa/posts/dataset-converter_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Profitons pour visualiser une image du dataset avec ses annotations (bbox) superposées sur l’image.</p>
<div id="cell-15" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-31T02:04:51.070855Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-31T02:04:51.071241Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-31T02:04:51.522270Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-31T02:04:51.071213Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-31T02:04:51.520708Z&quot;}" data-trusted="true" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtenir la première image et ses annotationsimage, annotations = train_data[0]# Convertir l'image PIL en tableau numpy pour l'affichageimage_np = np.array(image)# Créer un graphiquefig, ax = plt.subplots(1)ax.imshow(image_np)# Tracer chaque boîte englobantefor ann in annotations:    bbox = ann['bbox']    # Le format de boîte englobante COCO est [x, y, largeur, hauteur]    rect = patches.Rectangle((bbox[0], bbox[1]), bbox[2], bbox[3], linewidth=2, edgecolor='r', facecolor='none')    ax.add_patch(rect)# Afficher le graphiqueplt.show()</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://amenalahassa.github.io/amenalahassa/posts/dataset-converter_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>J’espère que cela vous sera utile. N’hésitez pas à me contacter si vous avez des questions ou des recommendations. À la prochaine ! :-)</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Retour au sommet</a> ]]></description>
  <category>YOLO</category>
  <category>CocoDetection</category>
  <category>Dataset</category>
  <guid>https://amenalahassa.github.io/amenalahassa/posts/dataset-converter.html</guid>
  <pubDate>Thu, 30 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Predicting reply under comment with LLM</title>
  <link>https://amenalahassa.github.io/amenalahassa/posts/predicting_comment_reply_llm.html</link>
  <description><![CDATA[ 




<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>This project originally started as a school assignment for Big Data class. The notebook presented here demonstrates the use of a large language model (LLM) to tackle a binary classification problem. Specifically, our objective is to predict whether a comment will receive a response or not.</p>
<p>To achieve this, we use an enriched dataset compiled from comments on Le Soleil’s Facebook posts. I will also share a separate notebook detailing the process of building this dataset. Additionally, I plan to publish another post explaining how to utilize simple feedforward neural networks or statistical models based on various comment features or the comment text itself.</p>
<p>Let’s dive in!</p>
</section>
<section id="dependence" class="level2">
<h2 class="anchored" data-anchor-id="dependence">Dependence</h2>
<p>I prefer to set aside the cell that install system dependency. It always produces a lot of useless gx3di3ce… You get it, right ?</p>
<div id="cell-4" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-16T22:47:58.621291Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-16T22:47:58.621693Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-16T22:48:24.158787Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-16T22:47:58.621662Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-16T22:48:24.157602Z&quot;}" data-trusted="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install torchsampler</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install sacremoses</span></code></pre></div>
</details>
</div>
<p>Now, let’s import some packages to have fun !</p>
<div id="cell-6" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-16T22:48:24.161082Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-16T22:48:24.161438Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-16T22:48:24.487077Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-16T22:48:24.161404Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-16T22:48:24.486273Z&quot;}" data-trusted="true" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transformers, torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mp</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification, AutoTokenizer</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, confusion_matrix</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchsampler <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ImbalancedDatasetSampler</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim.lr_scheduler <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ReduceLROnPlateau</span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> clear_output</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># warnings.filterwarnings('ignore')</span></span>
<span id="cb2-17">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb2-18">mp.cpu_count() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># used to set the number of num_worker for Dataloader, usually the half of it </span></span></code></pre></div>
</details>
</div>
<p>And since I use Google colab, I mount my drive to load the datasets later.</p>
<div id="cell-8" class="cell" data-outputid="aac39525-ff34-4217-825e-b73595c599ff" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only if you are using Google colab of course...</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> drive</span>
<span id="cb3-3">drive.mount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mounted at /content/drive</code></pre>
</div>
</div>
</section>
<section id="about-our-datasets" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="about-our-datasets">About our datasets</h2>
<p>In this section, we will explore the dataset used for our binary classification problem. The dataset has been divided into training and testing sets, with 70% of the data allocated for training and the remaining 30% for testing. This split ensures that we have a robust training set to build our model while retaining a sufficient portion of the data for evaluating the model’s performance.</p>
<p>Let’s load the train and the test sets.</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dirpath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive/MyDrive/DataSets/big_data/datasets'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify here the path to the dataset</span></span>
<span id="cb5-2">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(dirpath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/split/train_dataset.csv'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-3">test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(dirpath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/split/valid_dataset.csv'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<p>A few statistics about our dataset. First of all, it contains almost a million rows.</p>
<div id="cell-13" class="cell" data-outputid="5e429f03-52cb-4fd3-8666-97f14baf1375" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([train, test])</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Dataset shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset shape: (935698, 68)</code></pre>
</div>
</div>
<p>Secondly, the dataset is highly unbalanced. The following graph shows that there are only ~13% of comments with replies, by which I mean that these comments have received at least one comment.</p>
<div id="cell-15" class="cell" data-outputid="18b63c43-03e4-4e3b-f0e5-7ed81288739d" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>].value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>target
False    0.876036
True     0.123964
Name: proportion, dtype: float64</code></pre>
</div>
</div>
<div id="cell-fig-cap-margin0" class="cell page-columns page-full" data-outputid="85557c40-d918-45eb-f3f8-813cf72c9a94" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>].value_counts().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full">
<div id="fig-cap-margin0" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-cap-margin0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://amenalahassa.github.io/amenalahassa/posts/predicting_comment_reply_llm_files/figure-html/fig-cap-margin0-output-1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-cap-margin0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Barchart of the count of each class
</figcaption>
</figure>
</div>
</div>
</div>
<p>We have then two significant issues. Firstly, running the training on the entire dataset would be extremely time-consuming, even with substantial computational resources. Secondly, our dataset is unbalanced, which presents a challenge for accurate model training.</p>
<p>To address these issues, I opted for undersampling, ensuring an equal number of items from each class. This approach allows us to run our experiments more efficiently and mitigates the problem of data imbalance. Later in the notebook, we will explore the impact of the amount of data used on the model’s performance.</p>
</section>
<section id="class-and-functions" class="level2">
<h2 class="anchored" data-anchor-id="class-and-functions">Class and functions</h2>
<p>I write the CommentDataset class as a custom dataset designed for handling text data. It inherits from the Dataset class provided by PyTorch. This class is specifically tailored for tokenizing and preparing text data along with their corresponding labels for use in a model.</p>
<div id="cell-20" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-16T22:48:47.461504Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-16T22:48:47.461808Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-16T22:48:47.470522Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-16T22:48:47.461784Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-16T22:48:47.469657Z&quot;}" data-trusted="true" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CommentDataset(Dataset):</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message, labels, tokenizer):</span>
<span id="cb11-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> message</span>
<span id="cb11-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels</span>
<span id="cb11-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer</span>
<span id="cb11-6"></span>
<span id="cb11-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_labels(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb11-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels</span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb11-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message)</span>
<span id="cb11-12"></span>
<span id="cb11-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb11-14">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.message[idx]</span>
<span id="cb11-15">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels[idx]</span>
<span id="cb11-16"></span>
<span id="cb11-17">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokenizer.encode_plus(text, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, add_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, return_token_type_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-18"></span>
<span id="cb11-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb11-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>: torch.tensor(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>),</span>
<span id="cb11-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>: torch.tensor(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>),</span>
<span id="cb11-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_type_ids'</span>: torch.tensor(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_type_ids"</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>),</span>
<span id="cb11-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.tensor(label, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb11-24">        }</span></code></pre></div>
</details>
</div>
<p>The <code>train_model</code> method is designed to train a machine learning model using a provided training and testing dataloader, while tracking various performance metrics such as loss, accuracy, precision, recall, and a custom F2 score across multiple epochs, and implementing early stopping based on validation performance. The <code>test_model</code> method evaluates the trained model on a validation dataset, computing and printing evaluation metrics to assess the model’s performance.</p>
<div id="cell-22" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-16T22:48:47.471853Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-16T22:48:47.472149Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-16T22:48:47.496708Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-16T22:48:47.472105Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-16T22:48:47.495859Z&quot;}" data-trusted="true" data-execution_count="19">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_model(model, train_dataloader, test_dataloader, history<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}, num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-5</span>, early_stopping_patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>):</span>
<span id="cb12-2">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb12-3">    model.to(device)</span>
<span id="cb12-4">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_decay)</span>
<span id="cb12-5">    scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ReduceLROnPlateau(optimizer, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ReduceLROnPlateau scheduler</span></span>
<span id="cb12-6">    loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.BCEWithLogitsLoss()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Binary Cross-Entropy Loss</span></span>
<span id="cb12-7"></span>
<span id="cb12-8">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-9">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_accuracy'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-10">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_precision'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-11">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_recall'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-12">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_accuracy'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-13">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_precision'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-14">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_recall'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-15">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epochs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-16">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-17">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_score'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-18">    best_valid_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-19">    early_stopping_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-20"></span>
<span id="cb12-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb12-22">        model.train()</span>
<span id="cb12-23">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb12-24">        train_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-25">        train_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-26"></span>
<span id="cb12-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb12-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(train_dataloader, desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)):</span>
<span id="cb12-29">            optimizer.zero_grad()</span>
<span id="cb12-30"></span>
<span id="cb12-31">            input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(device)</span>
<span id="cb12-32">            attention_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>].to(device)</span>
<span id="cb12-33">            token_type_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_type_ids'</span>].to(device)</span>
<span id="cb12-34">            labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].to(device)</span>
<span id="cb12-35"></span>
<span id="cb12-36">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, attention_mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attention_mask, token_type_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token_type_ids)</span>
<span id="cb12-37">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.logits.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-38">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(logits, labels)</span>
<span id="cb12-39">            loss.backward()</span>
<span id="cb12-40">            optimizer.step()</span>
<span id="cb12-41"></span>
<span id="cb12-42">            train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb12-43">            train_preds.extend((logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>().tolist())</span>
<span id="cb12-44">            train_labels.extend(labels.tolist())</span>
<span id="cb12-45"></span>
<span id="cb12-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate metrics on training set</span></span>
<span id="cb12-47">        train_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(train_labels, train_preds)</span>
<span id="cb12-48">        train_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(train_labels, train_preds, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary'</span>)</span>
<span id="cb12-49">        train_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(train_labels, train_preds, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary'</span>)</span>
<span id="cb12-50"></span>
<span id="cb12-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluation loop</span></span>
<span id="cb12-52">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb12-53">        test_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-54">        test_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-55">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb12-56"></span>
<span id="cb12-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb12-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_dataloader:</span>
<span id="cb12-59"></span>
<span id="cb12-60">                input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(device)</span>
<span id="cb12-61">                attention_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>].to(device)</span>
<span id="cb12-62">                token_type_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_type_ids'</span>].to(device)</span>
<span id="cb12-63">                labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].to(device)</span>
<span id="cb12-64">                outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, attention_mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attention_mask, token_type_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token_type_ids)</span>
<span id="cb12-65">                logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.logits.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-66">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(logits, labels)</span>
<span id="cb12-67"></span>
<span id="cb12-68">                test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb12-69">                test_preds.extend((logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>().tolist())</span>
<span id="cb12-70">                test_labels.extend(labels.tolist())</span>
<span id="cb12-71"></span>
<span id="cb12-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate metrics on test set</span></span>
<span id="cb12-73">        test_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(test_labels, test_preds)</span>
<span id="cb12-74">        test_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(test_labels, test_preds, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary'</span>)</span>
<span id="cb12-75">        test_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(test_labels, test_preds, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary'</span>)</span>
<span id="cb12-76">        tn, fp, fn, tp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(test_labels, test_preds).ravel()</span>
<span id="cb12-77">        valid_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (tp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fn)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-78"></span>
<span id="cb12-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update learning rate scheduler</span></span>
<span id="cb12-80">        scheduler.step(valid_score)</span>
<span id="cb12-81"></span>
<span id="cb12-82">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epochs'</span>].append(epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-83"></span>
<span id="cb12-84">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>].append(train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb12-85">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_accuracy'</span>].append(train_accuracy)</span>
<span id="cb12-86">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_precision'</span>].append(train_precision)</span>
<span id="cb12-87">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_recall'</span>].append(train_recall)</span>
<span id="cb12-88"></span>
<span id="cb12-89">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>].append(test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_dataloader))</span>
<span id="cb12-90">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_accuracy'</span>].append(test_accuracy)</span>
<span id="cb12-91">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_precision'</span>].append(test_precision)</span>
<span id="cb12-92">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_recall'</span>].append(test_recall)</span>
<span id="cb12-93">        history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_score'</span>].append(valid_score)</span>
<span id="cb12-94"></span>
<span id="cb12-95">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb12-96"></span>
<span id="cb12-97">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Train Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-98">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-99">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Train Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-100">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Train Precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-101">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Train Recall: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-102"></span>
<span id="cb12-103">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Test Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-104">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Test Precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-105">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Test Recall: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-106">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Test F2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-107"></span>
<span id="cb12-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Early stopping</span></span>
<span id="cb12-109">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> valid_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> best_valid_score:</span>
<span id="cb12-110">            best_valid_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_score</span>
<span id="cb12-111">            early_stopping_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-113">            early_stopping_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-114"></span>
<span id="cb12-115">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> early_stopping_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> early_stopping_patience:</span>
<span id="cb12-116">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Early stopping triggered!"</span>)</span>
<span id="cb12-117">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb12-118"></span>
<span id="cb12-119"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_model(tokz, model, valid_data, history, device, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>):</span>
<span id="cb12-120">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb12-121">    test_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-122">    test_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-123">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb12-124"></span>
<span id="cb12-125">    valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommentDataset(valid_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to_numpy(), valid_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>).to_numpy(), tokz)</span>
<span id="cb12-126">    test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(valid_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-127">    loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.BCEWithLogitsLoss()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Binary Cross-Entropy Loss</span></span>
<span id="cb12-128"></span>
<span id="cb12-129">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb12-130">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_dataloader:</span>
<span id="cb12-131">            input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>].to(device)</span>
<span id="cb12-132">            attention_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>].to(device)</span>
<span id="cb12-133">            token_type_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_type_ids'</span>].to(device)</span>
<span id="cb12-134">            labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].to(device)</span>
<span id="cb12-135">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, attention_mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attention_mask, token_type_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token_type_ids)</span>
<span id="cb12-136">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.logits.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-137">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(logits, labels)</span>
<span id="cb12-138"></span>
<span id="cb12-139">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb12-140">            test_preds.extend((logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>().tolist())</span>
<span id="cb12-141">            test_labels.extend(labels.tolist())</span>
<span id="cb12-142"></span>
<span id="cb12-143">    test_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(test_labels, test_preds)</span>
<span id="cb12-144">    test_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(test_labels, test_preds)</span>
<span id="cb12-145">    test_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(test_labels, test_preds)</span>
<span id="cb12-146">    tn, fp, fn, tp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(test_labels, test_preds).ravel()</span>
<span id="cb12-147">    history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_score'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (tp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fn)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-148"></span>
<span id="cb12-149">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Metrics:"</span>)</span>
<span id="cb12-150">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Eval Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-151">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Eval Precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-152">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Eval Recall: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-153">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Eval F2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_score'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
</div>
<p>The <code>plot_history</code> method visualizes the training and testing metrics (loss, accuracy, precision, recall, and F2 score) over epochs using matplotlib. The <code>evaluate_model</code> function assesses the model by optionally plotting the training history and running the <code>test_model</code> function for evaluation metrics. The <code>get_loader</code> function prepares the data loaders for training and testing datasets, including optional under-sampling, and sets up the tokenizer and model for sequence classification tasks. The <code>equal_class_sampling</code> method ensures balanced class distribution by sampling an equal number of instances from each class in the dataset.</p>
<div id="cell-24" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-17T00:15:24.440839Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-17T00:15:24.441301Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-17T00:15:24.453534Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-17T00:15:24.441258Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-17T00:15:24.452391Z&quot;}" data-trusted="true" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_history(history):</span>
<span id="cb13-2">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">    epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epochs'</span>]</span>
<span id="cb13-5">    train_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>]</span>
<span id="cb13-6">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>]</span>
<span id="cb13-7">    train_accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_accuracy'</span>]</span>
<span id="cb13-8">    test_accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_accuracy'</span>]</span>
<span id="cb13-9">    train_precisions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_precision'</span>]</span>
<span id="cb13-10">    test_precisions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_precision'</span>]</span>
<span id="cb13-11">    train_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_recall'</span>]</span>
<span id="cb13-12">    test_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_recall'</span>]</span>
<span id="cb13-13">    valid_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_score'</span>]</span>
<span id="cb13-14"></span>
<span id="cb13-15">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-16">    plt.plot(epochs, train_losses, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Loss'</span>)</span>
<span id="cb13-17">    plt.plot(epochs, test_loss, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Loss'</span>)</span>
<span id="cb13-18">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epochs'</span>)</span>
<span id="cb13-19">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb13-20">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Loss'</span>)</span>
<span id="cb13-21"></span>
<span id="cb13-22">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-23">    plt.plot(epochs, train_accuracies, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Accuracy'</span>)</span>
<span id="cb13-24">    plt.plot(epochs, test_accuracies, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Accuracy'</span>)</span>
<span id="cb13-25">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epochs'</span>)</span>
<span id="cb13-26">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy'</span>)</span>
<span id="cb13-27">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy'</span>)</span>
<span id="cb13-28">    plt.legend()</span>
<span id="cb13-29"></span>
<span id="cb13-30">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb13-31">    plt.plot(epochs, train_precisions, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Precision'</span>)</span>
<span id="cb13-32">    plt.plot(epochs, test_precisions, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Precision'</span>)</span>
<span id="cb13-33">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epochs'</span>)</span>
<span id="cb13-34">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Precision'</span>)</span>
<span id="cb13-35">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Precision'</span>)</span>
<span id="cb13-36">    plt.legend()</span>
<span id="cb13-37"></span>
<span id="cb13-38">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-39">    plt.plot(epochs, train_recall, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Recall'</span>)</span>
<span id="cb13-40">    plt.plot(epochs, test_recall, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Recall'</span>)</span>
<span id="cb13-41">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epochs'</span>)</span>
<span id="cb13-42">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Recall'</span>)</span>
<span id="cb13-43">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Recall'</span>)</span>
<span id="cb13-44">    plt.legend()</span>
<span id="cb13-45"></span>
<span id="cb13-46">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb13-47">    plt.plot(epochs, valid_score, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training F2'</span>)</span>
<span id="cb13-48">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epochs'</span>)</span>
<span id="cb13-49">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F2'</span>)</span>
<span id="cb13-50">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F2'</span>)</span>
<span id="cb13-51">    plt.legend()</span>
<span id="cb13-52"></span>
<span id="cb13-53">    plt.tight_layout()</span>
<span id="cb13-54">    plt.show()</span>
<span id="cb13-55">    </span>
<span id="cb13-56"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> evaluate_model(tokz, model, valid_data, history, device, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, plot_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb13-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> plot_train:</span>
<span id="cb13-58">        plot_history(history)</span>
<span id="cb13-59">    test_model(tokz, model, valid_data, history, device, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bs)</span>
<span id="cb13-60">    </span>
<span id="cb13-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_loader(model_nm, dataset, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, under_sample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, use_pad_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, use_special_pad_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb13-62">    X_train, y_train, X_test, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_train'</span>], dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>], dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_test'</span>], dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_test'</span>]</span>
<span id="cb13-63">    tokz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_nm)</span>
<span id="cb13-64"></span>
<span id="cb13-65">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_class)</span>
<span id="cb13-66"></span>
<span id="cb13-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X_train) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb13-68">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model, tokz, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb13-69"></span>
<span id="cb13-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> use_pad_token:</span>
<span id="cb13-71">        tokz.pad_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.eos_token</span>
<span id="cb13-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> use_special_pad_token:</span>
<span id="cb13-73">        tokz.add_special_tokens({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pad_token'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[PAD]'</span>})</span>
<span id="cb13-74"></span>
<span id="cb13-75">    model.resize_token_embeddings(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokz))</span>
<span id="cb13-76"></span>
<span id="cb13-77">    train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommentDataset(X_train.to_numpy(), y_train.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>).to_numpy(), tokz)</span>
<span id="cb13-78">    test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommentDataset(X_test.to_numpy(), y_test.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>).to_numpy(), tokz)</span>
<span id="cb13-79"></span>
<span id="cb13-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> under_sample:</span>
<span id="cb13-81">        train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_dataset, sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ImbalancedDatasetSampler(train_dataset), batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-82">        test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(test_dataset, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb13-84">        train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-85">        test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-86"></span>
<span id="cb13-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model, tokz, train_loader, test_loader</span>
<span id="cb13-88"></span>
<span id="cb13-89"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> equal_class_sampling(input_features, target_labels, num_samples):</span>
<span id="cb13-90">    num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(target_labels.unique())</span>
<span id="cb13-91">    num_samples_per_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> num_classes</span>
<span id="cb13-92">    dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: input_features, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>: target_labels})</span>
<span id="cb13-93">    grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>])</span>
<span id="cb13-94">    sampled_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(num_samples_per_class, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x))))</span>
<span id="cb13-95">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sampled_elements[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>], sampled_elements[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]</span></code></pre></div>
</details>
</div>
</section>
<section id="training" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="training">Training</h2>
<section id="evaluations" class="level3">
<h3 class="anchored" data-anchor-id="evaluations">Evaluations</h3>
<p>To evaluate our model, we will primarily use recall and a custom metric that we will call F2. Recall measures the ability of the model to correctly identify all relevant instances (true positives) from the dataset and is calculated as TP/(TP + FN), where TP stands for true positives and FN stands for false negatives.</p>
<p>The custom metric, F2, is designed to provide a more comprehensive evaluation of the model’s performance by balancing the detection of the positive class and minimizing errors. The F2 score is calculated as TP/(TP + FN + FP), where FP stands for false positives. This metric helps evaluate the model’s capacity to detect the positive class correctly while accounting for both false negatives and false positives. By considering both types of errors, the F2 metric ensures that the model is not only identifying positive instances accurately but also minimizing the incorrect classification of negative instances as positive. This balanced approach provides a more nuanced assessment of the model’s overall effectiveness.</p>
<hr>
</section>
<section id="modeling" class="level3">
<h3 class="anchored" data-anchor-id="modeling">Modeling</h3>
<p>For simplicity’s sake, I’ll use the distill version of Camembert model here, but you’re free to use any of the models below.</p>
<div id="cell-29" class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2024-05-16T22:48:47.588511Z&quot;,&quot;iopub.execute_input&quot;:&quot;2024-05-16T22:48:47.588779Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-05-16T22:48:47.597717Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-05-16T22:48:47.588757Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-05-16T22:48:47.596859Z&quot;}" data-trusted="true" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bert-base-uncased"</span>,</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distilgpt2"</span>,</span>
<span id="cb14-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flau'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flaubert/flaubert_base_uncased"</span>,</span>
<span id="cb14-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cmb'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmarkea/distilcamembert-base"</span>,</span>
<span id="cb14-6">}</span></code></pre></div>
</div>
</section>
<section id="fine-tuning" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="fine-tuning">Fine tuning</h3>
<p>The next code might look a bit confusing at first, but let’s break it down step by step.</p>
<p>What we’re doing here is creating smaller subsets from our original training and test sets to build training, validation and test samples.</p>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the 'message' and 'target' columns from the training set and store them in X_train and y_train</span></span>
<span id="cb15-2">X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'message'</span>], train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]</span></code></pre></div>
</div>
<p>Next, we split off a small portion of the original test set to use as our validation set. This is like keeping a small piece of pie aside before sharing the rest.</p>
<div id="cell-34" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">X_valid_sample, X_valid, y_valid_sample, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'message'</span>], test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>], test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb16-2">X_valid_sample.shape, X_valid.shape, y_valid_sample.shape, y_valid.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>((9357,), (177783,), (9357,), (177783,))</code></pre>
</div>
</div>
<p>Then, we balance our training data. Imagine we have 6000 rows, and we want to make sure we have an equal number of positive and negative samples—3000 of each.</p>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">X_train_sample, y_train_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> equal_class_sampling(X_train, y_train, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6000</span>)</span></code></pre></div>
</div>
<p>Finally, we take another small slice of the test set to build our final test sample. Think of this as taking a tiny bit more of that pie for a taste test.</p>
<div id="cell-38" class="cell" data-outputid="936648c1-d053-418c-9b07-db17a7070612" data-execution_count="27">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the remaining validation set to create a small test sample (2% of X_valid and y_valid)</span></span>
<span id="cb19-2">_, X_test_sample, _, y_test_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_valid, y_valid, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb19-3">X_test_sample.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(3556,)</code></pre>
</div>
</div>
<p>By doing this, we ensure our model has balanced and representative data for training, validation, and final testing.</p>
<p>Now, we train, we validate and evaluate the model on the test set.</p>
<div id="cell-fig-cap-margin" class="cell page-columns page-full" data-outputid="04235890-1b1e-407a-ea6c-50bea8b53f85" data-execution_count="28">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize an empty dictionary to store training and evaluation history.</span></span>
<span id="cb21-2">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the batch size for data loaders.</span></span>
<span id="cb21-3">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the learning rate for the optimizer.</span></span>
<span id="cb21-4">weight_decay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the weight decay (L2 regularization) for the optimizer.</span></span>
<span id="cb21-5">EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of epochs for training.</span></span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the dataset dictionary with training and testing samples.</span></span>
<span id="cb21-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_train'</span>: X_train_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>: y_train_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_test'</span>: X_test_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_test'</span>: y_test_sample}</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the model, tokenizer, training data loader, and testing data loader.</span></span>
<span id="cb21-11">model, tokz, train_loader, test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_loader(models[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cmb'</span>], data, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, use_special_pad_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb21-12"></span>
<span id="cb21-13">model.to(device)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move the model to the specified device (CPU or GPU).</span></span>
<span id="cb21-14"></span>
<span id="cb21-15">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Record the start time for training.</span></span>
<span id="cb21-16">train_model(model, train_loader, test_loader, history, num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EPOCHS, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE, early_stopping_patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_decay)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the model.</span></span>
<span id="cb21-17">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Record the end time for training.</span></span>
<span id="cb21-18">execution_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the execution time for training.</span></span>
<span id="cb21-19"></span>
<span id="cb21-20">clear_output()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the output (useful in Jupyter notebooks to clear previous outputs).</span></span>
<span id="cb21-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution time:"</span>, execution_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the execution time for training.</span></span>
<span id="cb21-22"></span>
<span id="cb21-23">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Record the start time for evaluation.</span></span>
<span id="cb21-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the model on the validation dataset and optionally plot the training history.</span></span>
<span id="cb21-25">evaluate_model(tokz, model, (X_valid_sample, y_valid_sample), history, device, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, plot_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-26">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Record the end time for evaluation.</span></span>
<span id="cb21-27">execution_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the execution time for evaluation.</span></span>
<span id="cb21-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution time:"</span>, execution_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the execution time for evaluation.</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Execution time: 363.3319444656372 seconds</code></pre>
</div>
<div class="cell-output cell-output-display page-columns page-full">
<div id="fig-cap-margin" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-cap-margin-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://amenalahassa.github.io/amenalahassa/posts/predicting_comment_reply_llm_files/figure-html/fig-cap-margin-output-2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-cap-margin-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Series of graphs depicting the performance metrics of the model. The metrics include Training Loss, Accuracy, Precision, Recall, and F2 score for both training and testing data.
</figcaption>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Metrics:
  Eval Accuracy: 0.6475366036122688
  Eval Precision: 0.23312101910828026
  Eval Recall: 0.7605985037406484
  Eval F2: 21.7184903868977
Execution time: 84.7105667591095 seconds</code></pre>
</div>
</div>
<p>Based on the performance of the model on two epochs, we can make the following analysis:</p>
<ol type="1">
<li><strong>Training Loss</strong>: Decreases from approximately 0.55 to 0.45, indicating improved performance during training.</li>
<li><strong>Accuracy</strong>: Shows a significant increase for training accuracy from about 0.70 to 0.78, while test accuracy slightly improves from around 0.62 to 0.64.</li>
<li><strong>Precision</strong>: Training precision rises from about 0.75 to 0.80, whereas test precision remains almost constant at around 0.21.</li>
<li><strong>Recall</strong>: Training recall increases from 0.60 to 0.75, while test recall decreases from 0.85 to 0.70, suggesting potential overfitting.</li>
<li><strong>F2</strong>: Indicates a decline in the F2 score from approximately 21.2 to 20.2, which means that the model is not generalizing from the training data to the test data.</li>
</ol>
<section id="test-metrics" class="level6">
<h6 class="anchored" data-anchor-id="test-metrics">Test Metrics:</h6>
<ol type="1">
<li><strong>Eval Accuracy</strong>: 0.6475, which indicates the model’s ability to correctly predict test data is moderate but lower compared to training accuracy.</li>
<li><strong>Eval Precision</strong>: 0.2331, which is significantly lower than the training precision, suggesting the model struggles with false positives on the test set.</li>
<li><strong>Eval Recall</strong>: 0.7606, which is relatively high and close to the training recall, showing the model still performs well in identifying most positive instances on the test set.</li>
<li><strong>Eval F2</strong>: 21.7185, which remains high, indicating that despite high recall, the model struggles with false positives.</li>
</ol>
</section>
<section id="conclusion" class="level6">
<h6 class="anchored" data-anchor-id="conclusion">Conclusion:</h6>
<ul>
<li><strong>Overfitting</strong>: The discrepancy between training and test precision suggests overfitting. The model performs well on the training data but struggles with generalization, leading to lower performance on unseen data.</li>
<li><strong>F2 score</strong>: The model prioritizes recall over precision. This is evident from the high recall but low precision on the test set. This behavior is further reflected in the F2 score, which is low, indicating many false positives.</li>
</ul>
<p>This analysis suggest that there is a problem with our model, because we need a model that should perform well on unseen data with low errors.</p>
</section>
<section id="why-is-this-important" class="level6">
<h6 class="anchored" data-anchor-id="why-is-this-important">Why is this important?</h6>
<p>Well, imagine that we will deploy our model in a real-world application. We don’t want to miss comments that might receive a response because we could use them to increase traffic on our site or social media. In that case, a model that detects positive instances well with minimal false positives is acceptable. However, our model currently has many false positives, which can be problematic.</p>
</section>
<section id="practical-implications" class="level6 page-columns page-full">
<h6 class="anchored" data-anchor-id="practical-implications">Practical Implications:</h6>
<ul>
<li>Business Impact: If the model is used in an application like content moderation or customer feedback analysis, high false positives mean that many irrelevant comments would be flagged for response. This can lead to inefficient use of resources and missed opportunities to engage with truly relevant comments.</li>
<li>User Experience: In applications like spam detection, a high number of false positives can frustrate users, as legitimate messages may be incorrectly flagged as spam.</li>
<li>Operational Efficiency: For customer service applications, responding to false positives wastes time and effort that could be better spent addressing genuine issues.</li>
</ul>
<p>But, let’s try with more data in our training set to see the impact on the model performance. We will initialise a new model and train it on 10000 comments.</p>
<div id="cell-43" class="cell" data-outputid="af75dd9b-263b-4e8b-c489-9a39062f9e47">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'message'</span>], train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]</span>
<span id="cb24-2">X_train_sample, y_train_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> equal_class_sampling(X_train, y_train, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb24-3">_, X_test_sample, _, y_test_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_valid, y_valid, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-fig-cap-margin2" class="cell page-columns page-full" data-outputid="ded74fd0-2a4a-42d1-e16d-ec39b5198250" data-execution_count="30">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb25-2">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb25-3">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span></span>
<span id="cb25-4">weight_decay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb25-5">EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb25-6">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_train'</span>: X_train_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>: y_train_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_test'</span>: X_test_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_test'</span>: y_test_sample}</span>
<span id="cb25-7">model, tokz, train_loader, test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_loader(models[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cmb'</span>], data, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, use_special_pad_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb25-8">model.to(device)</span>
<span id="cb25-9"></span>
<span id="cb25-10">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb25-11">train_model(model, train_loader, test_loader, history, num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EPOCHS, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE, early_stopping_patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_decay)</span>
<span id="cb25-12">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb25-13">execution_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb25-14"></span>
<span id="cb25-15">clear_output()</span>
<span id="cb25-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution time:"</span>, execution_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb25-17"></span>
<span id="cb25-18">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb25-19">evaluate_model(tokz, model, (X_valid_sample, y_valid_sample), history, device, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, plot_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-20">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb25-21">execution_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb25-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution time:"</span>, execution_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Execution time: 1122.6102643013 seconds</code></pre>
</div>
<div class="cell-output cell-output-display page-columns page-full">
<div id="fig-cap-margin2" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-cap-margin2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://amenalahassa.github.io/amenalahassa/posts/predicting_comment_reply_llm_files/figure-html/fig-cap-margin2-output-2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-cap-margin2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Series of graphs depicting the performance metrics of the model. The metrics include Training Loss, Accuracy, Precision, Recall, and F2 score for both training and testing data.
</figcaption>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Metrics:
  Eval Accuracy: 0.6856898578604254
  Eval Precision: 0.25793871866295265
  Eval Recall: 0.769742310889443
  Eval F2: 23.946211533488494
Execution time: 84.70709776878357 seconds</code></pre>
</div>
</div>
<p>The F2 score improved from 21% to 23%. But can we conclude that it’s the increased training set that induces these results?</p>
<p>Let’s try it with a larger training set.</p>
<div id="cell-46" class="cell" data-outputid="2c81ea7b-c84f-4e90-aed8-3d1922e1fefe">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'message'</span>], train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]</span>
<span id="cb28-2">X_train_sample, y_train_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> equal_class_sampling(X_train, y_train, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>)</span>
<span id="cb28-3">_, X_test_sample, _, y_test_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_valid, y_valid, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-fig-cap-margin3" class="cell page-columns page-full" data-outputid="76cc62cb-0659-475d-a63c-fe92852e4214" data-execution_count="35">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb29-2">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb29-3">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span></span>
<span id="cb29-4">weight_decay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb29-5">EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb29-6">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_train'</span>: X_train_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>: y_train_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_test'</span>: X_test_sample, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_test'</span>: y_test_sample}</span>
<span id="cb29-7">model, tokz, train_loader, test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_loader(models[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cmb'</span>], data, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, use_special_pad_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb29-8">model.to(device)</span>
<span id="cb29-9"></span>
<span id="cb29-10">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb29-11">train_model(model, train_loader, test_loader, history, num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EPOCHS, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE, early_stopping_patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_decay)</span>
<span id="cb29-12">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb29-13">execution_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb29-14"></span>
<span id="cb29-15">clear_output()</span>
<span id="cb29-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution time:"</span>, execution_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb29-17"></span>
<span id="cb29-18">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb29-19">evaluate_model(tokz, model, (X_valid_sample, y_valid_sample), history, device, bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, plot_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-20">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb29-21">execution_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb29-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution time:"</span>, execution_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Execution time: 1914.5363965034485 seconds</code></pre>
</div>
<div class="cell-output cell-output-display page-columns page-full">
<div id="fig-cap-margin3" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-cap-margin3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://amenalahassa.github.io/amenalahassa/posts/predicting_comment_reply_llm_files/figure-html/fig-cap-margin3-output-2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-cap-margin3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Series of graphs depicting the performance metrics of the model. The metrics include Training Loss, Accuracy, Precision, Recall, and F2 score for both training and testing data.
</figcaption>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Metrics:
  Eval Accuracy: 0.7079192048733568
  Eval Precision: 0.26705237515225333
  Eval Recall: 0.7290108063175395
  Eval F2: 24.293628808864266
Execution time: 85.33442664146423 seconds</code></pre>
</div>
</div>
<p>On test set, the F2 score of the model improve again from 23% to 24%.</p>
</section>
<section id="conclusion-1" class="level6">
<h6 class="anchored" data-anchor-id="conclusion-1">Conclusion:</h6>
<p>The increase in the training set size helps the model generalize better to the test data, reducing overfitting and improving its ability to balance precision and recall effectively.</p>
</section>
</section>
</section>
<section id="takeaways" class="level2">
<h2 class="anchored" data-anchor-id="takeaways">Takeaways</h2>
<ol type="1">
<li><p><strong>Dataset Analysis is Crucial</strong>: Always begin by analyzing your dataset. Understanding the distribution and characteristics of your data helps in making informed decisions about model training and evaluation. In scenarios with limited resources, generating more data for the underrepresented class might not be feasible. Instead, sampling equal numbers of comments from each class for the training set can help reduce bias towards the overrepresented class.</p></li>
<li><p><strong>Balanced Training, Unbalanced Validation</strong>: While balancing the training set by equal sampling is important to reduce bias, the validation set should remain unbalanced. This approach ensures that the model’s performance is evaluated in a realistic manner, reflecting its ability to generalize to the true distribution of the data.</p></li>
<li><p><strong>Resource-Based Training Strategy</strong>: Define your training strategy based on the available resources. When computational power or time is limited, working with a smaller, balanced sample of the dataset is a practical approach. This allows for iterative experimentation and tuning without the overhead of processing the entire dataset.</p></li>
<li><p><strong>Problem-Specific Metrics</strong>: Choose evaluation metrics that align with your problem’s objectives. For instance, in this scenario, the F2 score (F2 = tp / (tp + 2 * fn + fp)) is used to evaluate model performance by balancing the detection of the positive class and minimizing errors.</p></li>
<li><p><strong>Initial Model Performance</strong>: After the first round of training, the F2 score indicates that the model prioritizes recall over precision. This is evidenced by the high recall but low precision on the test set.</p></li>
<li><p><strong>Impact of False Positives</strong>: High false positives can be problematic in real-world applications. They can lead to inefficient use of resources and missed opportunities to engage with truly relevant comments. This highlights the need for a balance between precision and recall.</p></li>
<li><p><strong>Training Set Size and Generalization</strong>: Increasing the size of the training set helps the model generalize better to the test data. A larger training set reduces overfitting and enhances the model’s ability to balance precision and recall effectively. This results in improved overall performance and more reliable predictions.</p></li>
<li><p><strong>Choosing the Right Model</strong>: Select a model that is suitable for your specific problem. For instance, since the dataset consists of French text, using CamemBERT, a model specifically designed for the French language, is an appropriate choice.</p></li>
<li><p><strong>Hyperparameter Tuning</strong>: Finding the optimal hyperparameters for your model is crucial and often involves extensive experimentation. Before finalizing the model, numerous combinations were tested to identify the best-performing configuration. Hyperparameter tuning is more of an art than a strict recipe, requiring intuition and experience to achieve the best results.</p></li>
</ol>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Retour au sommet</a> ]]></description>
  <category>LLM</category>
  <category>Classification</category>
  <category>Unbalanced Dataset</category>
  <guid>https://amenalahassa.github.io/amenalahassa/posts/predicting_comment_reply_llm.html</guid>
  <pubDate>Tue, 21 May 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
